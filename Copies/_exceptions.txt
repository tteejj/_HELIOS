# Enhanced Exception Module for Helios
# Provides EXTREMELY detailed error tracking and context capture.
# This module is now self-contained and relies on the main script to load its dependencies.

# Define custom exception types using PowerShell 5-compatible approach
Add-Type -TypeDefinition @"
using System;
using System.Collections;

namespace Helios {
    public class HeliosException : Exception {
        public Hashtable Context { get; set; }
        public string Component { get; set; }
        public object OriginalError { get; set; }
        public DateTime Timestamp { get; set; }
        
        public HeliosException(string message, Hashtable context) : base(message) {
            this.Context = context ?? new Hashtable();
            this.Component = context != null && context.ContainsKey("Component") ? context["Component"].ToString() : "Unknown";
            this.Timestamp = DateTime.Now;
        }
    }
    
    public class NavigationException : HeliosException { public NavigationException(string message, Hashtable context) : base(message, context) { } }
    public class ServiceInitializationException : HeliosException { public ServiceInitializationException(string message, Hashtable context) : base(message, context) { } }
    public class ComponentRenderException : HeliosException { public ComponentRenderException(string message, Hashtable context) : base(message, context) { } }
    public class StateMutationException : HeliosException { public StateMutationException(string message, Hashtable context) : base(message, context) { } }
    public class InputHandlingException : HeliosException { public InputHandlingException(string message, Hashtable context) : base(message, context) { } }
    public class DataLoadException : HeliosException { public DataLoadException(string message, Hashtable context) : base(message, context) { } }
    public class ThemeException : HeliosException { public ThemeException(string message, Hashtable context) : base(message, context) { } }
}
"@ -ErrorAction SilentlyContinue

# Global error tracking
$script:ErrorHistory = [System.Collections.ArrayList]::new()
$script:MaxErrorHistory   = 500
$script:GlobalErrorHandler = $null

# Enhanced error handler with automatic logging
function global:Set-HeliosErrorHandler {
    param(
        [scriptblock]$CustomHandler = $null
    )
    $script:GlobalErrorHandler = $CustomHandler
    if(Get-Command Write-Log -ErrorAction SilentlyContinue) {
        Write-Log -Level Info -Message "Helios error handler configured" -Data @{ HasCustomHandler = ($null -ne $CustomHandler) }
    }
}

# Get EXTREMELY detailed error information
function global:Get-DetailedError {
    param(
        [System.Management.Automation.ErrorRecord]$ErrorRecord,
        [hashtable]$AdditionalContext = @{}
    )
    try {
        $callStack = Get-PSCallStack
        $errorInfo = @{
            Timestamp = Get-Date -Format "o"
            Summary = $ErrorRecord.Exception.Message
            Type = $ErrorRecord.Exception.GetType().FullName
            Category = $ErrorRecord.CategoryInfo.Category.ToString()
            CategoryActivity = $ErrorRecord.CategoryInfo.Activity
            CategoryReason = $ErrorRecord.CategoryInfo.Reason
            CategoryTargetName = $ErrorRecord.CategoryInfo.TargetName
            CategoryTargetType = $ErrorRecord.CategoryInfo.TargetType
            TargetObject = $null
            ScriptName = $ErrorRecord.InvocationInfo.ScriptName
            LineNumber = $ErrorRecord.InvocationInfo.ScriptLineNumber
            ColumnNumber = $ErrorRecord.InvocationInfo.OffsetInLine
            Line = $ErrorRecord.InvocationInfo.Line
            Command = $ErrorRecord.InvocationInfo.InvocationName
            PositionMessage = $ErrorRecord.InvocationInfo.PositionMessage
            StackTrace = @()
            InnerExceptions = @()
            HeliosContext = @{}
            SystemContext = @{}
            AdditionalContext = $AdditionalContext
        }
        
        try {
            if ($ErrorRecord.TargetObject) {
                $errorInfo.TargetObject = @{
                    Type = $ErrorRecord.TargetObject.GetType().FullName
                    ToString = $ErrorRecord.TargetObject.ToString()
                }
            }
        } catch {
            $errorInfo.TargetObject = "Failed to serialize target object: $($_.Exception.Message)"
        }
        
        foreach ($frame in $callStack) {
            try {
                $frameInfo = @{
                    Command = $frame.Command
                    Location = $frame.Location
                    ScriptName = $frame.ScriptName
                    ScriptLineNumber = $frame.ScriptLineNumber
                    Module = if ($frame.ScriptName) { [System.IO.Path]::GetFileNameWithoutExtension($frame.ScriptName) } else { "Interactive" }
                }
                $errorInfo.StackTrace += $frameInfo
            } catch {
                $errorInfo.StackTrace += @{
                    Command = "Failed to capture frame"
                    Error = $_.Exception.Message
                }
            }
        }
        
        $innerEx = $ErrorRecord.Exception.InnerException
        while ($innerEx) {
            try {
                $errorInfo.InnerExceptions += @{
                    Message = $innerEx.Message
                    Type = $innerEx.GetType().FullName
                    StackTrace = $innerEx.StackTrace
                }
                $innerEx = $innerEx.InnerException
            } catch {
                # Stop iterating if we can't process an inner exception
                break
            }
        }
        
        $errorInfo.Component = Identify-HeliosComponent -ErrorRecord $ErrorRecord
        
        try {
            $errorInfo.SystemContext = @{
                ProcessId = $PID
                ThreadId = [System.Threading.Thread]::CurrentThread.ManagedThreadId
                PowerShellVersion = $PSVersionTable.PSVersion.ToString()
                ExecutionPolicy = (Get-ExecutionPolicy).ToString()
                CurrentLocation = (Get-Location).Path
                MemoryUsage = [System.GC]::GetTotalMemory($false)
                LoadedModules = try {(Get-Module).Name} catch {"<failed>"}
            }
        } catch {
            $errorInfo.SystemContext = @{ Error = "Failed to capture system context" }
        }
        
        return $errorInfo
        
    } catch {
        return @{
            Timestamp = Get-Date -Format "o"
            Summary = "CRITICAL: Error analysis failed"
            OriginalError = $ErrorRecord.Exception.Message
            AnalysisError = $_.Exception.Message
            Type = "ErrorAnalysisFailure"
        }
    }
}

function global:Identify-HeliosComponent {
    param(
        [System.Management.Automation.ErrorRecord]$ErrorRecord
    )
    try {
        $scriptName = $ErrorRecord.InvocationInfo.ScriptName
        if (-not $scriptName) {
            $callStack = Get-PSCallStack
            foreach ($frame in $callStack) {
                if ($frame.ScriptName) {
                    $scriptName = $frame.ScriptName
                    break
                }
            }
        }
        
        if (-not $scriptName) { return "Interactive/Unknown" }
        
        $fileName = [System.IO.Path]::GetFileNameWithoutExtension($scriptName)
        
        $componentMap = @{
            'app-store' = 'AppStore'
            'navigation' = 'Navigation'
            'tui-engine' = 'TUI Engine'
            'tui-framework' = 'TUI Framework'
            'dashboard-screen' = 'Dashboard'
            'task-screen' = 'Tasks'
            'main-helios' = 'Application'
            'data-manager' = 'Data Manager'
            'theme-manager' = 'Theme Manager'
            'keybindings' = 'Keybindings'
            'exceptions' = 'Exceptions'
            'logger' = 'Logger'
        }
        
        foreach ($pattern in $componentMap.Keys) {
            if ($fileName -match $pattern) {
                return $componentMap[$pattern]
            }
        }
        
        return "Unknown ($fileName)"
        
    } catch {
        return "Component Identification Failed"
    }
}

function global:Invoke-WithErrorHandling {
    param(
        [scriptblock]$ScriptBlock,
        [string]$Component = "Unknown",
        [hashtable]$Context = @{},
        [scriptblock]$ErrorHandler = $null,
        [string]$OperationName = "Unknown Operation"
    )
    if (Get-Command Trace-FunctionEntry -ErrorAction SilentlyContinue) {
        Trace-FunctionEntry -FunctionName "Invoke-WithErrorHandling" -Parameters @{ Component = $Component; OperationName = $OperationName }
    }
    try {
        return (& $ScriptBlock)
    } catch {
        $errorContext = if ($Context) { $Context.Clone() } else { @{} }
        $errorContext.Component = $Component
        $errorContext.OperationName = $OperationName
        
        $errorMessage = "An unknown error occurred in $Component"
        $detailedError = $null
        $originalExceptionObject = $_

        if ($originalExceptionObject -is [System.Management.Automation.ErrorRecord]) {
            $errorMessage = $originalExceptionObject.Exception.Message
            $detailedError = Get-DetailedError -ErrorRecord $originalExceptionObject -AdditionalContext $errorContext
        } elseif ($originalExceptionObject -is [Exception]) {
            $errorMessage = $originalExceptionObject.Message
        } elseif ($originalExceptionObject -is [string]) {
            $errorMessage = $originalExceptionObject
        }
        
        if (Get-Command Write-Log -ErrorAction SilentlyContinue) {
            Write-Log -Level Error -Message "Error in $Component during $OperationName: $errorMessage" -Data $detailedError
        }
        
        [void]$script:ErrorHistory.Add($detailedError)
        if ($script:ErrorHistory.Count -gt $script:MaxErrorHistory) {
            $script:ErrorHistory.RemoveAt(0)
        }
        
        $heliosEx = [PSCustomObject]@{
            Message = $errorMessage
            Component = $Component
            Context = $errorContext
            Timestamp = (Get-Date)
            OriginalError = $originalExceptionObject
            OperationName = $OperationName
            ExceptionType = 'HeliosException'
        }
        
        if ($ErrorHandler) {
            try {
                & $ErrorHandler -Exception $heliosEx -DetailedError $detailedError
            } catch {
                if (Get-Command Write-Log -ErrorAction SilentlyContinue) {
                    Write-Log -Level Error -Message "Error handler itself failed" -Data @{ OriginalError = $heliosEx.Message; HandlerError = $_.Exception.Message }
                }
            }
        } else {
            $properException = New-Object System.Management.Automation.RuntimeException($heliosEx.Message)
            $properException.Data.Add("HeliosException", $heliosEx)
            throw $properException
        }
    }
}

Export-ModuleMember -Function @(
    'Set-HeliosErrorHandler',
    'Get-DetailedError',
    'Identify-HeliosComponent',
    'Invoke-WithErrorHandling'
)