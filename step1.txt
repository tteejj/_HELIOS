Excellent. Here is the revised and final version of the LLM Refactoring Guide, incorporating your feedback and the suggested refinements. The instructions are now even more precise and include self-verification steps.

---

### **PMC Terminal v5: LLM Refactoring Protocol (Definitive Edition)**

This document contains the complete architectural vision, coding standards, and step-by-step plan for refactoring the PMC Terminal application.

#### **Part 1: The Master Blueprint & Core Principles**

**(Use this section in your *first* prompt and as a reference in all subsequent prompts.)**

> **Project Goal:**
> We are refactoring a PowerShell TUI application named "PMC Terminal v5". The goal is to move from a complex, JavaScript-inspired architecture (`app-store` with `Dispatch`) to a simpler, more robust, and idiomatic PowerShell architecture using a **Service-Oriented** approach with **direct function calls**.
>
> **Core Architectural Principles (The "PowerShell-First" Philosophy):**
>
> 1.  **Service-Oriented Architecture:** The application logic **MUST** be organized into services (e.g., `DataManager`, `Navigation`). These services are initialized once and made available through a central `$global:Services` locator.
>
> 2.  **Direct Interaction Model:** UI components and screens **MUST** interact with services via **Direct Method Calls** (e.g., `$services.DataManager.AddTask(...)`). The abstract `Dispatch("ACTION_NAME")` pattern is strictly forbidden.
>
> 3.  **One-Way Data Flow & Eventing:**
>     *   **Change:** State is only ever changed by calling a function in a service.
>     *   **Announce:** After changing state, the service **MUST** announce the change by broadcasting a simple, specific event (e.g., `Publish-Event -EventName "Tasks.Changed"`).
>     *   **React:** UI Screens **MUST** subscribe to these events to know when to refresh their data from the global state.
>
> 4.  **Strict Data Contracts (Classes):** All core data entities (`Task`, `Project`) **MUST** be defined as PowerShell `class` types in a central `models.psm1` module. Passing generic `[hashtable]` objects for business data is forbidden. This ensures type safety and data integrity across all module boundaries.
>
> 5.  **Global State Purity:** The use of `$script:` or `$global:` scope to *share* state between modules is **strictly forbidden**. The only exception is the single `$global:Data` variable, which is owned and managed exclusively by `data-manager.psm1`. All other dependencies (like services) must be passed as parameters.

---
### **Part 2: Coding Standards & Style Guide**

**(Include these rules in every prompt to reinforce them.)**

> **Coding Standards:**
>
> *   **Error Handling:** Every public-facing function and any critical internal method **MUST** be wrapped in `Invoke-WithErrorHandling`. Provide detailed `Component` and `Context` parameters.
> *   **Defensive Programming:** All functions **MUST** perform null checks on their parameters, especially on objects passed from other modules (like `$services`).
> *   **Logging:** Include `Write-Log` statements at key function entry/exit points and for significant state changes, as seen in the legacy code.
> *   **Comments:** Add a header comment to each file explaining its purpose. Add comments marked with `AI:` to explain significant changes from the legacy code.
> *   **File Markers:** The input file will use `# --- START OF FILE [filename] ---` and `# --- END OF FILE [filename] ---` markers. You must preserve these markers in your output for all files.

---
### **How to Structure Your Prompts: A Step-by-Step Guide**

Follow this sequence. Do not move to the next step until the current one is complete.

**General Prompting Strategy:**

*   **One Task Per Prompt:** Give the LLM one, clearly defined goal at a time.
*   **Provide Full Context:** Always provide the Master Blueprint and Coding Standards. For refactoring tasks, provide the complete source code of the file(s) being replaced or modified.
*   **State the Output:** Be explicit about what you expect. "Your output should be the full, complete code for the new `services/data-manager.psm1` file."
*   **Iterate and Refine:** If the LLM makes a mistake, start a new chat session. Give it the same prompt, but add a "Correction from last attempt" section.

---
### **The Step-by-Step Rebuild Plan**

Here are the individual prompts for each step of the refactoring process.

---
### **Phase 1: Refactor the Control Flow (The "Verbs")**

**Goal:** Replace the `app-store` with a direct `DataManager` service and update all UI components to use it.

#### **Prompt 1.1: Project Cleanup**

```text
Hello. We are starting a major refactoring of a PowerShell TUI application. I will be providing you with a series of tasks. It is critical that you follow the provided blueprint and coding standards for every task.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of this guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

Your first task is to clean up obsolete files from the project.

**Task:** Modify the main application file, `All.txt`.
**Instruction:**
1.  In the `All.txt` file, find the code block marked `# --- START OF FILE main-helios.ps1 ---`.
2.  Inside that block, find the `$script:ModulesToLoad` array.
3.  Delete the line that loads `app-store.psm1`.
4.  Next, in `All.txt`, find and delete the entire code block marked `# --- START OF FILE services/app-store.psm1 ---` and its corresponding `--- END OF FILE ---` marker.
5.  Finally, in `All.txt`, find and delete the entire code block for the manifest file marked `# --- START OF FILE services/app-store.psd1 ---` and its corresponding `--- END OF FILE ---` marker.

**Output:** Your output must be the full, complete, and modified code for `All.txt` with the specified sections removed.

--- START OF LEGACY All.txt CODE ---
[... Paste the full content of `All.txt` here ...]
--- END OF LEGACY All.txt CODE ---
```

#### **Prompt 1.2: Enhance the `DataManager` Service**

```text
Excellent. Now we will create the new `DataManager` service to replace the old `app-store`.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of this guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Replace the entire `modules/data-manager.psm1` module with a new version that contains the business logic.
**Instruction:**
1.  Locate the `# --- START OF FILE modules/data-manager.psm1 ---` block in `All.txt`.
2.  Replace its entire content with the provided new code. The new code converts the logic from the legacy `TASK_CREATE`, `TASK_UPDATE`, and `TASK_DELETE` action handlers into standalone, exported functions: `Add-PmcTask`, `Update-PmcTask`, and `Remove-PmcTask`.
3.  These new functions must modify the `$global:Data` variable directly and then publish a simple notification event (`Publish-Event -EventName "Tasks.Changed"`) upon completion.

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file.

--- START OF CONTEXT (Legacy main-helios.ps1 for action logic) ---
[... Paste the full code of the `Initialize-PMCServices` function from the legacy All.txt file here. This gives the LLM the original action logic to translate. ...]
--- END OF CONTEXT ---

--- START OF LEGACY All.txt CODE (to be modified) ---
[... Paste the full content of `All.txt` here ...]
--- END OF LEGACY All.txt CODE ---
```

#### **Prompt 1.3: Refactor the Service Initializer**

```text
The `DataManager` service is now ready. The next step is to update the main application to use it.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of this guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Refactor the `Initialize-PMCServices` function within the `main-helios.ps1` section of `All.txt`.
**Instruction:**
1.  Find the `Initialize-PMCServices` function.
2.  Delete all lines related to `Initialize-AppStore` and `RegisterAction`.
3.  In their place, add the new logic that creates the `$services.DataManager` handle, which points to the new functions from `data-manager.psm1`.
4.  Ensure the final `$global:Services = $services` line remains, as this is our service locator.

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file.

--- START OF LEGACY All.txt CODE ---
[... Paste the full content of `All.txt` here ...]
--- END OF LEGACY CODE ---
```

#### **Prompt 1.4: Update a UI Screen**

```text
The control flow is now refactored. The final step of Phase 1 is to update a UI screen to use this new, direct pattern.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of this guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Refactor the `screens/task-screen-helios.psm1` module within `All.txt`.
**Instruction:** Rewrite this screen to use the new service-oriented architecture.
1.  The `Get-TaskManagementScreen` factory function must accept a `$services` parameter.
2.  The screen's `Init` method must store this `$services` object in a `_services` property.
3.  All calls that previously used `$services.Store.Dispatch` must now be replaced with direct calls to `$services.DataManager` methods (e.g., `& $self._services.DataManager.RemoveTask -Id $id`).
4.  The screen must subscribe to the `"Tasks.Changed"` event in its `Init` method. The event handler's action block should re-fetch the task list from `$global:Data` and update the table component.
5.  The screen **MUST** have an `OnExit` method that calls `Unsubscribe-Event` to clean up its subscription and prevent memory leaks.

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file.

--- START OF LEGACY All.txt CODE ---
[... Paste the full content of `All.txt` here ...]
--- END OF LEGACY CODE ---
```

#### **Prompt 1.5: Self-Verification for Phase 1**

```text
Phase 1 is complete. Now, please verify your work.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of this guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Analyze the provided `All.txt` file and confirm that it adheres to the Phase 1 refactoring goals.
**Instruction:** Review the code and answer the following questions with a "Yes" or "No" and a brief explanation.
1.  Has the `app-store.psm1` module and its manifest been completely removed?
2.  In `main-helios.ps1`, has the `$script:ModulesToLoad` array been updated to remove the `app-store`?
3.  In `Initialize-PMCServices`, have all `Initialize-AppStore` and `RegisterAction` calls been removed?
4.  In `Initialize-PMCServices`, does a `$services.DataManager` handle now exist?
5.  In `task-screen-helios.psm1`, does it now call methods on `$services.DataManager` instead of using `Dispatch`?
6.  In `task-screen-helios.psm1`, does it subscribe to a simple notification event like `"Tasks.Changed"`?

**Output:** A list of answers to the 6 questions above.

--- START OF REFACTORED All.txt CODE ---
[... Paste the full content of the `All.txt` file generated from the previous prompt here ...]
--- END OF REFACTORED CODE ---
```

---
### **Phase 2: Refactor the Data Structure (The "Nouns")**

**Goal:** Replace hashtables with strongly-typed PowerShell classes to create a strict, self-validating data contract.

**(Continue with similar, detailed prompts for Phase 2, covering the creation of `models.psm1`, updating `DataManager` to use classes, and finally updating the UI screens to pass class objects.)**