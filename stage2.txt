Of course. Here is the continuation of the step-by-step LLM refactoring guide, covering all of Phase 2.

---
### **PMC Terminal v5: LLM Refactoring Guide (Phase 2)**

This document contains the prompts for **Phase 2** of the refactoring. You must have successfully completed all steps of Phase 1 before beginning this phase.

**(Remember to start your session with the "Expert PowerShell Developer" persona prompt and include the Master Blueprint & Coding Standards in every prompt.)**

---
### **Phase 2: Refactor the Data Structure (The "Nouns")**

**Goal:** Replace ambiguous hashtables with a strict, self-validating data contract using PowerShell Classes.

#### **Prompt 2.1: Create the Data Models Module**

```text
Helios Architect, Phase 1 is complete. We will now begin Phase 2 by creating the data contract for our application.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of the main guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Create a new file, `modules/models.psm1`, within the `All.txt` monolith file.
**Instruction:** This new module will define the core data classes for the entire application. It must be self-contained and have no dependencies.
1.  Define enums for `TaskStatus`, `TaskPriority`, and `BillingType` to enforce type safety.
2.  Define a `PmcTask` class with strongly-typed properties (e.g., `[string]`, `[datetime]`, `[TaskStatus]`).
3.  Define a `PmcProject` class with strongly-typed properties.
4.  Include constructors for each class to set default values.
5.  Export all classes and enums from the module.

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file, with this new `modules/models.psm1` block added. Place it immediately after the `modules/event-system.psm1` block and before `modules/data-manager.psm1`.

--- START OF All.txt CODE (from end of Phase 1) ---
[... Paste the full content of `All.txt` here ...]
--- END OF All.txt CODE ---
```

#### **Prompt 2.2: Update Module Loader to Include Models**

```text
Helios Architect, the models module now exists. We must ensure it is loaded correctly by the application at startup.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of the main guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** In `All.txt`, update the `$script:ModulesToLoad` array inside the `main-helios.ps1` section.
**Instruction:** Add an entry to load the new `models.psm1` module. **It is critical that this module is loaded *before* `data-manager.psm1`**, as the DataManager will depend on the classes defined in the models.

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file.

--- START OF All.txt CODE ---
[... Paste the full content of `All.txt` from the previous step here ...]
--- END OF All.txt CODE ---
```

#### **Prompt 2.3: Upgrade the `DataManager` to Use Classes**

```text
The data models are defined and loaded. Now we will upgrade our DataManager service to produce and consume these new, strongly-typed objects.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of the main guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Refactor the `modules/data-manager.psm1` module within `All.txt` to be class-aware.
**Instruction:**
1.  Add `using module '.\models.psm1'` to the top of the file block.
2.  In the `$script:Data` definition, change `$Tasks = @()` to `$Tasks = [System.Collections.Generic.List[PmcTask]]::new()` and `$Projects = @{}` to `$Projects = [System.Collections.Generic.List[PmcProject]]::new()`.
3.  **In `Load-UnifiedData`:** Modify the logic to "re-hydrate" the plain objects from JSON into `[PmcTask]` and `[PmcProject]` class instances. This involves iterating the loaded data and creating new class objects, then adding them to the strongly-typed lists.
4.  **Update Function Signatures:** Change function parameters from `[hashtable]$TaskData` and `[string]$TaskId` to `[PmcTask]$Task` where appropriate. For example, `Remove-PmcTask` should now accept a `[PmcTask]` object.
5.  **Update Function Logic:** Instead of creating hashtables, use the class constructors (e.g., `$newTask = [PmcTask]::new($Title)`).

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file.

--- START OF All.txt CODE ---
[... Paste the full content of `All.txt` from the previous step here ...]
--- END OF All.txt CODE ---
```

#### **Prompt 2.4: Upgrade the UI to Leverage Classes**

```text
The DataManager service is now fully class-aware. The final step is to update the UI to leverage these new, robust data objects.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of the main guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Refactor the `screens/task-screen-helios.psm1` module within `All.txt` to use the new data classes.
**Instruction:**
1.  Add `using module '.\models.psm1'` to the top of the `task-screen-helios.psm1` file block.
2.  **Update Data Binding:** Pass the `[System.Collections.Generic.List[PmcTask]]` from `$global:Data.Tasks` directly to your table component.
3.  Modify the table component's column definitions to use scriptblock formatters (`Format={ ... }`) that access the properties of the `[PmcTask]` object (e.g., `$task.Title`, `$task.Status.ToString()`).
4.  **Update User Actions:** When a user acts on a table row, the component should now return the full `[PmcTask]` object. Update the logic in `HandleInput` to pass this object directly to the DataManager service (e.g., `& $self._services.DataManager.RemoveTask -Task $selectedTask`).

**Output:** Your output must be the full, complete, and modified code for the `All.txt` file.

--- START OF All.txt CODE ---
[... Paste the full content of `All.txt` from the previous step here ...]
--- END OF All.txt CODE ---
```

#### **Prompt 2.5: Self-Verification for Phase 2**

```text
Phase 2 is complete. Now, please verify your work on the entire application.

--- START OF MASTER BLUEPRINT & CODING STANDARDS ---
[... Paste Part 1 and Part 2 of the main guide here ...]
--- END OF MASTER BLUEPRINT & CODING STANDARDS ---

**Task:** Analyze the provided `All.txt` file and confirm that it adheres to all refactoring goals.
**Instruction:** Review the code and answer the following questions with a "Yes" or "No" and a brief explanation.
1.  Does a `modules/models.psm1` file exist defining classes like `PmcTask`?
2.  Is the `models.psm1` module loaded *before* `data-manager.psm1` in the main script?
3.  In `data-manager.psm1`, are the `Tasks` and `Projects` collections now strongly-typed lists (e.g., `[System.Collections.Generic.List[PmcTask]]`)?
4.  In `data-manager.psm1`, do functions like `Add-PmcTask` now create instances of the new classes instead of hashtables?
5.  In `task-screen-helios.psm1`, is the `[PmcTask]` list from `$global:Data` passed directly to the table component?
6.  In `task-screen-helios.psm1`, when an action is performed (like Delete), is the entire `[PmcTask]` object passed to the DataManager service, rather than just an ID?

**Output:** A list of answers to the 6 questions above.

--- START OF REFACTORED All.txt CODE ---
[... Paste the full content of the `All.txt` file generated from the previous prompt here ...]
--- END OF REFACTORED CODE ---
```